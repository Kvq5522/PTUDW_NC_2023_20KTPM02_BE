// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  email    String @unique
  password String @db.VarChar(255)

  first_name String @db.VarChar(255)
  last_name  String @db.VarChar(255)

  is_activated Boolean @default(false)
  is_banned    Boolean @default(false)

  authorization    Int  @default(1)
  authorization_fk Role @relation(fields: [authorization], references: [id])

  student_id    String?            @unique
  student_id_fk ReservedStudentId? @relation(fields: [student_id], references: [student_id], onDelete: SetNull)

  phone_number String?
  address      String? @db.VarChar(255)
  age          Int?
  gender       String?
  avatar       String? @default("https://firebasestorage.googleapis.com/v0/b/ptudwnc2-20ktpm02-2023.appspot.com/o/images%2Favatar%2Fuser-default-avatar.png?alt=media&token=175255db-bb03-476a-841d-0e438ccd0125")

  recovery_tokens       RecoveryToken[]
  classroom_members     ClassroomMember[]
  announcement_comments AnnouncementComment[]
  owned_classrooms      Classroom[]
  ClassroomAnnouncement ClassroomAnnouncement[]

  @@map("users")
}

model Role {
  id Int @id @default(autoincrement())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  name String @unique

  classroom_members ClassroomMember[]
  users             User[]

  @@map("roles")
}

model RecoveryToken {
  id Int @id @default(autoincrement())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  expires_at DateTime

  token String @unique

  user_id Int
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("recovery_tokens")
}

model Classroom {
  id Int @id @default(autoincrement())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  name String

  is_archive Boolean @default(false)

  owner_id Int
  owner_fk User @relation(fields: [owner_id], references: [id], onDelete: Cascade)

  classroom_members   ClassroomMember[]
  announcements       ClassroomAnnouncement[]
  invitations         ClassroomInvitation[]
  grade_compositions  GradeComposition[]
  student_grade_lists StudentGradeList[]
  Notification        Notification[]

  @@map("classrooms")
}

model ClassroomInvitation {
  id Int @id @default(autoincrement())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  student_invite_code     String @unique
  teacher_invite_code     String @unique
  student_invite_uri_code String @unique
  teacher_invite_uri_code String @unique

  classroom_id Int
  classroom_fk Classroom @relation(fields: [classroom_id], references: [id], onDelete: Cascade)

  @@map("classroom_invitations")
}

model ClassroomMember {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  member_role    Int
  member_role_fk Role @relation(fields: [member_role], references: [id])

  member_id    Int
  member_id_fk User @relation(fields: [member_id], references: [id], onDelete: Cascade)

  classroom_id    Int
  classroom_id_fk Classroom @relation(fields: [classroom_id], references: [id], onDelete: Cascade)

  @@unique([member_id, classroom_id])
  @@map("classroom_members")
}

enum AnnouncementType {
  GRADE_ANNOUNCEMENT
  GRADE_REVIEW
  CLASSROOM_ANNOUNCEMENT
  OTHERS
}

model Notification {
  id Int @id @default(autoincrement())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  title       String
  description String @default("")

  classroom_id Int?
  classroom_fk Classroom? @relation(fields: [classroom_id], references: [id], onDelete: Cascade)

  announcement_id Int?
  announcement_fk ClassroomAnnouncement? @relation(fields: [announcement_id], references: [id], onDelete: Cascade)

  to_members String
  has_seen   String @default("")

  type AnnouncementType

  @@map("notifications")
}

model ClassroomAnnouncement {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String @default("Announcement")

  description String

  created_by    Int
  created_by_fk User @relation(fields: [created_by], references: [id])

  //Map id of users to string, seperated by comma
  to_members String
  //Map id of users who have seen this announcement to string, seperated by comma
  has_seen   String @default("")

  type AnnouncementType

  grade_category    Int?
  grade_category_fk GradeComposition? @relation(fields: [grade_category], references: [id], onDelete: Cascade)

  expected_grade Float?

  classroom_id    Int
  classroom_id_fk Classroom @relation(fields: [classroom_id], references: [id], onDelete: Cascade)

  comments     AnnouncementComment[]
  Notification Notification[]

  @@map("classroom_announcements")
}

model AnnouncementComment {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user_id    Int
  user_id_fk User @relation(fields: [user_id], references: [id])

  description String

  slug String @default("")

  announcement_id    Int
  announcement_id_fk ClassroomAnnouncement @relation(fields: [announcement_id], references: [id], onDelete: Cascade)

  @@map("announcement_comments")
}

model ReservedStudentId {
  id Int @id @default(autoincrement())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  student_id String @unique

  users               User[]
  student_grade_lists StudentGradeList[]

  @@map("reserved_student_ids")
}

model GradeComposition {
  id Int @id @default(autoincrement())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  name String

  classroom_id    Int
  classroom_id_fk Classroom @relation(fields: [classroom_id], references: [id], onDelete: Cascade)

  grade_percent Float
  is_finalized  Boolean @default(false)
  index         Int

  student_grade_details StudentGradeDetail[]
  ClassroomAnnouncement ClassroomAnnouncement[]

  @@map("grade_compositions")
}

model StudentGradeList {
  id Int @id @default(autoincrement())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  name  String
  email String

  student_id    String
  student_id_fk ReservedStudentId @relation(fields: [student_id], references: [student_id], onDelete: Cascade)

  classroom_id    Int
  classroom_id_fk Classroom @relation(fields: [classroom_id], references: [id], onDelete: Cascade)

  student_grade_details StudentGradeDetail[]

  @@unique([student_id, classroom_id])
  @@map("student_grade_lists")
}

model StudentGradeDetail {
  id Int @id @default(autoincrement())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  grade_category    Int
  grade_category_fk GradeComposition @relation(fields: [grade_category], references: [id], onDelete: Cascade)

  grade Float

  student_id    String
  classroom_id  Int
  student_id_fk StudentGradeList @relation(fields: [student_id, classroom_id], references: [student_id, classroom_id], onDelete: Cascade)

  @@unique([student_id, classroom_id, grade_category])
  @@map("student_grade_details")
}
